# خطوات كتابة الكود:
1- نقوم بإنشاء Class:
class Singleton {}
2- سنضع static method داخل الكلاس:
static getInstance() {}
3- سنتأكد ان الinstance غير مكرر:
if (!Singleton.instance) {
}
4- من الداخل ستضيف بيانات الinstance:
Singleton.instance = {
  /* أضف خصائص ووظائف الكائن الوحيد هنا */
};
5- من خارج الif condation تعمل return للinstance.
6- نكتب التالي:
const singleton1 = Singleton.getInstance();
const singleton2 = Singleton.getInstance();
7- للتأكيد على أن الinstance لا بد وأن يكون بنتيجة واحدة:
console.log(singleton1 === singleton2); // Output: true
8- يمكنك التجربة بالكثير من البيانات مثل الارقام العشوائية وغيرها.
9- الكود الكامل مرفق مع الملف.
=========================
اين استخدم الSingleton design pattern:
1- الاتصال بقاعدة البيانات: يمكن استخدام Singleton pattern للتأكد من وجود اتصال واحد فقط بقاعدة البيانات في أي وقت ممكن.
2- إدارة الإعدادات: يمكن استخدام Singleton pattern لإنشاء كائن واحد فقط يتحكم في إعدادات التطبيق.
3- إنشاء ملفات تعريف المستخدم: يمكن استخدام Singleton pattern لإنشاء كائن واحد فقط لتخزين معلومات تسجيل الدخول وتعريف المستخدم.
4- الكائنات الثقيلة الوزن: يمكن استخدام Singleton pattern لتجنب إنشاء العديد من الكائنات الثقيلة الوزن في التطبيق.
=========================
يمكن تلخيص فوائد استخدام Singleton pattern في النقاط التالية:
1- يضمن وجود كائن واحد فقط في ذاكرة الكمبيوتر، مما يوفر استخدامًا أكثر فعالية للذاكرة وتقليل النفايات.
2- يتم تحسين الأداء، حيث يتم إنشاء الكائن الوحيد مرة واحدة فقط ويتم استخدامه في جميع أنحاء التطبيق.
3- يجعل الكود أكثر نظافة ويسهل الصيانة، حيث يتم تقليل التبعية وزيادة تعددية الاستخدام.
=========================
مصدر للتعلم النظري:
https://www.dofactory.com/javascript/design-patterns/singleton
مصادر اليوتيوب:
